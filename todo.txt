Roots and Wings

!! 0.x - Roots Game Aspect - !!

The roots aspect of roots and wings has to do with gathering, and selling resources. Resources are needed to buy both planet, and ship upgrades. This aspect of the game has to do with staying near the home planet, where there is no enemy activity, making money.

0.0.x - The State machine.

* index.html file added.
* Main.js file added that will contain the state machine.
* Game start machine (main.js) providing basic app structure.
* just a start, and game application state for now.
* main loop starts, and just logs 'ready to rock' in the console each frame tick.
* frameRate, and lastTick values added in Main.js.
* Frame rate caped at 30fps

0.1.x - The World module

* world.js file added containing a World module.
* World.update method added and called on each frame tick during the 'game' application state.
* World.new method added that will set up initial World Conditions.
* world.js will contain the current state information with map position, and view port data
* world status will change by way of simple user input for now.

0.2.x - Canvas module, and event attachment

* canvas.js file added containing a Canvas module
* Canvas.draw object added, which will contain a draw method for each application state.
* canvas allowing for World status to be drawn on each tick via a Canvas.draw('game') call.

0.3.x - Player ship movement

* The player Ship object will be part of World module for now.
* Players ship starts at the home location
* The player is able to change ship heading (ad keys)
* draw ship method added in canvas.js.
* The distance from home location variable increases as the players ship moves away from the home location.
* Player speeds up and slows down (ws keys)

0.4.x - Planet objects

* Planets array added in World module.
* Using just objects for Planets for now (no class).
* Home planet placed at (0,0).
* Internal genPanents method added in World Module that generates Planets Class instances.
* Just a simple draw all planets method in canvas.js for now.
* Inner, and outer rim of planets around (0,0).



0.5.x - Planet state

* player starts with a small amount of starting money.
* The player can land at friendly, or unclaimed planets.
* landing at a planet results in entering a planet game state

!! -- Bookmark - anything below this needs to get done -- !!

* The planet game state displays a planet menu.
* If the planet is unclaimed the player can clam the planet as theirs by building something in the planet menu.
* Build options include a just a star port for now.


0.6.x - Star Ports, and upgrades

* Three planet resources ore, air, and energy.
* Planet properties include resource multipliers.
* once a star port is built the planet will start producing resources.
* The starting type, production rate, and capacity depends on the planet.
* planet upgrades unlock after building a star port
* upgrade a planets resource output by building one of three buildings (ore extractor, teraformer, and power cell plant).

0.7.x - Trade

* once a star port is built on a planet trade is possible with it.
* The player can load their ship with resources from a planet.
* The player can then transport those resources back home.
* once back home the player can sell those resources.
* The amount of money the player receives depends on the type, amount, and distance from the home planet.


0.x.x - Movement delay fix ( fix player movement so there is not a delay )
0.x.x - Multi key input fix ( fix problem with multi key input)


!! 1.x - Wings game aspect !!

The wings aspect of the game has to do with going beyond the inner space of planets where the far more valuable outer space of plants is. However the player will begin to run into enemies that become increasingly ore difficult depending on the distance from the home world.

1.x.x - title screen
1.x.x - ship.js file
1.x.x - Enemy's added, and basic enemy AI
1.x.x - Weapon Class
1.x.x - ship upgrades
1.x.x - Jump Ability


!! if I have time, and space !!

x.x.x - Space Sectors

* space sectors introduced in order to reduce the number of planets the game has to
 loop over each game tick.
* space divided into 5 * 5 view port size sectors
* The game only loops over planets that are part of that sector
* coming close to a sector will load planets from that sector
* going far enough away from a sector will purge it's planets out.
